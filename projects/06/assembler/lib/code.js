"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Address/Computation instruction module
 *
 * A-instruction format:
 * @value
 * Represents setting the address register to a 15-bit memory location
 * 0vvv vvvv vvvv vvvv
 * v = 0 or 1
 *
 * C-instruction format:
 * dest=comp;jump
 * dest or jump may be empty
 * If dest is empty, '=' is omitted
 * If jump is empty, ';' is omitted
 * a-bit is 1 when command uses M, 0 when it uses A
 *      1234 5612 3123
 * 111a cccc ccdd djjj
 */
var Code = function Code() {
  _classCallCheck(this, Code);

  _defineProperty(this, "generateCompMap", function () {
    var codeTranslation = {
      '101010': ['0'],
      '111111': ['1'],
      '111010': ['-1'],
      '001100': ['D'],
      '110000': ['A', 'M'],
      '001101': ['!D'],
      '110001': ['!A'],
      '001111': ['-D'],
      '110011': ['-A'],
      '011111': ['D+1', '1+D'],
      '110111': ['A+1', '1+A', 'M+1', '1+M'],
      '001110': ['D-1'],
      '110010': ['A-1', 'M-1'],
      '000010': ['D+A', 'A+D', 'D+M', 'M+D'],
      '010011': ['D-A', 'D-M'],
      '000111': ['A-D', 'M-D'],
      '000000': ['D&A', 'D&M'],
      '010101': ['D|A', 'D|M']
    };
    return Object.keys(codeTranslation).reduce(function (acc, code) {
      var commands = codeTranslation[code];
      commands.forEach(function (c) {
        var aBit = c.includes('M') ? '1' : '0';
        acc[c] = aBit + code;
      });
      return acc;
    }, {});
  });

  _defineProperty(this, "jump", {
    "null": '000',
    JGT: '001',
    JEQ: '010',
    JGE: '011',
    JLT: '100',
    JNE: '101',
    JLE: '110',
    JMP: '111'
  });

  _defineProperty(this, "dest", {
    "null": '000',
    M: '001',
    D: '010',
    MD: '011',
    A: '100',
    AM: '101',
    AD: '110',
    AMD: '111'
  });

  _defineProperty(this, "comp", this.generateCompMap());
};

var _default = Code;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb2RlLnRzIl0sIm5hbWVzIjpbIkNvZGUiLCJjb2RlVHJhbnNsYXRpb24iLCJPYmplY3QiLCJrZXlzIiwicmVkdWNlIiwiYWNjIiwiY29kZSIsImNvbW1hbmRzIiwiZm9yRWFjaCIsImMiLCJhQml0IiwiaW5jbHVkZXMiLCJKR1QiLCJKRVEiLCJKR0UiLCJKTFQiLCJKTkUiLCJKTEUiLCJKTVAiLCJNIiwiRCIsIk1EIiwiQSIsIkFNIiwiQUQiLCJBTUQiLCJnZW5lcmF0ZUNvbXBNYXAiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBSUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQW1CTUEsSTs7OzJDQUNxQixZQUFpQjtBQUMxQyxRQUFNQyxlQUE2QyxHQUFHO0FBQ3JELGdCQUFVLENBQUMsR0FBRCxDQUQyQztBQUVyRCxnQkFBVSxDQUFDLEdBQUQsQ0FGMkM7QUFHckQsZ0JBQVUsQ0FBQyxJQUFELENBSDJDO0FBSXJELGdCQUFVLENBQUMsR0FBRCxDQUoyQztBQUtyRCxnQkFBVSxDQUFDLEdBQUQsRUFBTSxHQUFOLENBTDJDO0FBTXJELGdCQUFVLENBQUMsSUFBRCxDQU4yQztBQU9yRCxnQkFBVSxDQUFDLElBQUQsQ0FQMkM7QUFRckQsZ0JBQVUsQ0FBQyxJQUFELENBUjJDO0FBU3JELGdCQUFVLENBQUMsSUFBRCxDQVQyQztBQVVyRCxnQkFBVSxDQUFDLEtBQUQsRUFBUSxLQUFSLENBVjJDO0FBV3JELGdCQUFVLENBQUMsS0FBRCxFQUFRLEtBQVIsRUFBZSxLQUFmLEVBQXNCLEtBQXRCLENBWDJDO0FBWXJELGdCQUFVLENBQUMsS0FBRCxDQVoyQztBQWFyRCxnQkFBVSxDQUFDLEtBQUQsRUFBUSxLQUFSLENBYjJDO0FBY3JELGdCQUFVLENBQUMsS0FBRCxFQUFRLEtBQVIsRUFBZSxLQUFmLEVBQXNCLEtBQXRCLENBZDJDO0FBZXJELGdCQUFVLENBQUMsS0FBRCxFQUFRLEtBQVIsQ0FmMkM7QUFnQnJELGdCQUFVLENBQUMsS0FBRCxFQUFRLEtBQVIsQ0FoQjJDO0FBaUJyRCxnQkFBVSxDQUFDLEtBQUQsRUFBUSxLQUFSLENBakIyQztBQWtCckQsZ0JBQVUsQ0FBQyxLQUFELEVBQVEsS0FBUjtBQWxCMkMsS0FBdEQ7QUFxQkEsV0FBT0MsTUFBTSxDQUFDQyxJQUFQLENBQVlGLGVBQVosRUFBNkJHLE1BQTdCLENBQW9DLFVBQUNDLEdBQUQsRUFBaUJDLElBQWpCLEVBQTBCO0FBQ3BFLFVBQU1DLFFBQVEsR0FBR04sZUFBZSxDQUFDSyxJQUFELENBQWhDO0FBQ0FDLE1BQUFBLFFBQVEsQ0FBQ0MsT0FBVCxDQUFpQixVQUFDQyxDQUFELEVBQU87QUFDdkIsWUFBTUMsSUFBSSxHQUFHRCxDQUFDLENBQUNFLFFBQUYsQ0FBVyxHQUFYLElBQWtCLEdBQWxCLEdBQXdCLEdBQXJDO0FBQ0FOLFFBQUFBLEdBQUcsQ0FBQ0ksQ0FBRCxDQUFILEdBQVNDLElBQUksR0FBR0osSUFBaEI7QUFDQSxPQUhEO0FBS0EsYUFBT0QsR0FBUDtBQUNBLEtBUk0sRUFRSixFQVJJLENBQVA7QUFTQSxHOztnQ0FHaUM7QUFDakMsWUFBTSxLQUQyQjtBQUVqQ08sSUFBQUEsR0FBRyxFQUFFLEtBRjRCO0FBR2pDQyxJQUFBQSxHQUFHLEVBQUUsS0FINEI7QUFJakNDLElBQUFBLEdBQUcsRUFBRSxLQUo0QjtBQUtqQ0MsSUFBQUEsR0FBRyxFQUFFLEtBTDRCO0FBTWpDQyxJQUFBQSxHQUFHLEVBQUUsS0FONEI7QUFPakNDLElBQUFBLEdBQUcsRUFBRSxLQVA0QjtBQVFqQ0MsSUFBQUEsR0FBRyxFQUFFO0FBUjRCLEc7O2dDQVdBO0FBQ2pDLFlBQU0sS0FEMkI7QUFFakNDLElBQUFBLENBQUMsRUFBRSxLQUY4QjtBQUdqQ0MsSUFBQUEsQ0FBQyxFQUFFLEtBSDhCO0FBSWpDQyxJQUFBQSxFQUFFLEVBQUUsS0FKNkI7QUFLakNDLElBQUFBLENBQUMsRUFBRSxLQUw4QjtBQU1qQ0MsSUFBQUEsRUFBRSxFQUFFLEtBTjZCO0FBT2pDQyxJQUFBQSxFQUFFLEVBQUUsS0FQNkI7QUFRakNDLElBQUFBLEdBQUcsRUFBRTtBQVI0QixHOztnQ0FXWCxLQUFLQyxlQUFMLEU7OztlQUdUMUIsSSIsInNvdXJjZXNDb250ZW50IjpbInR5cGUgU3RyaW5nTWFwID0ge1xuXHRbY29kZTogc3RyaW5nXTogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBBZGRyZXNzL0NvbXB1dGF0aW9uIGluc3RydWN0aW9uIG1vZHVsZVxuICpcbiAqIEEtaW5zdHJ1Y3Rpb24gZm9ybWF0OlxuICogQHZhbHVlXG4gKiBSZXByZXNlbnRzIHNldHRpbmcgdGhlIGFkZHJlc3MgcmVnaXN0ZXIgdG8gYSAxNS1iaXQgbWVtb3J5IGxvY2F0aW9uXG4gKiAwdnZ2IHZ2dnYgdnZ2diB2dnZ2XG4gKiB2ID0gMCBvciAxXG4gKlxuICogQy1pbnN0cnVjdGlvbiBmb3JtYXQ6XG4gKiBkZXN0PWNvbXA7anVtcFxuICogZGVzdCBvciBqdW1wIG1heSBiZSBlbXB0eVxuICogSWYgZGVzdCBpcyBlbXB0eSwgJz0nIGlzIG9taXR0ZWRcbiAqIElmIGp1bXAgaXMgZW1wdHksICc7JyBpcyBvbWl0dGVkXG4gKiBhLWJpdCBpcyAxIHdoZW4gY29tbWFuZCB1c2VzIE0sIDAgd2hlbiBpdCB1c2VzIEFcbiAqICAgICAgMTIzNCA1NjEyIDMxMjNcbiAqIDExMWEgY2NjYyBjY2RkIGRqampcbiAqL1xuXG5jbGFzcyBDb2RlIHtcblx0cHJpdmF0ZSBnZW5lcmF0ZUNvbXBNYXAgPSAoKTogU3RyaW5nTWFwID0+IHtcblx0XHRjb25zdCBjb2RlVHJhbnNsYXRpb246IHsgW2NvZGU6IHN0cmluZ106IHN0cmluZ1tdIH0gPSB7XG5cdFx0XHQnMTAxMDEwJzogWycwJ10sXG5cdFx0XHQnMTExMTExJzogWycxJ10sXG5cdFx0XHQnMTExMDEwJzogWyctMSddLFxuXHRcdFx0JzAwMTEwMCc6IFsnRCddLFxuXHRcdFx0JzExMDAwMCc6IFsnQScsICdNJ10sXG5cdFx0XHQnMDAxMTAxJzogWychRCddLFxuXHRcdFx0JzExMDAwMSc6IFsnIUEnXSxcblx0XHRcdCcwMDExMTEnOiBbJy1EJ10sXG5cdFx0XHQnMTEwMDExJzogWyctQSddLFxuXHRcdFx0JzAxMTExMSc6IFsnRCsxJywgJzErRCddLFxuXHRcdFx0JzExMDExMSc6IFsnQSsxJywgJzErQScsICdNKzEnLCAnMStNJ10sXG5cdFx0XHQnMDAxMTEwJzogWydELTEnXSxcblx0XHRcdCcxMTAwMTAnOiBbJ0EtMScsICdNLTEnXSxcblx0XHRcdCcwMDAwMTAnOiBbJ0QrQScsICdBK0QnLCAnRCtNJywgJ00rRCddLFxuXHRcdFx0JzAxMDAxMSc6IFsnRC1BJywgJ0QtTSddLFxuXHRcdFx0JzAwMDExMSc6IFsnQS1EJywgJ00tRCddLFxuXHRcdFx0JzAwMDAwMCc6IFsnRCZBJywgJ0QmTSddLFxuXHRcdFx0JzAxMDEwMSc6IFsnRHxBJywgJ0R8TSddLFxuXHRcdH07XG5cblx0XHRyZXR1cm4gT2JqZWN0LmtleXMoY29kZVRyYW5zbGF0aW9uKS5yZWR1Y2UoKGFjYzogU3RyaW5nTWFwLCBjb2RlKSA9PiB7XG5cdFx0XHRjb25zdCBjb21tYW5kcyA9IGNvZGVUcmFuc2xhdGlvbltjb2RlXTtcblx0XHRcdGNvbW1hbmRzLmZvckVhY2goKGMpID0+IHtcblx0XHRcdFx0Y29uc3QgYUJpdCA9IGMuaW5jbHVkZXMoJ00nKSA/ICcxJyA6ICcwJztcblx0XHRcdFx0YWNjW2NdID0gYUJpdCArIGNvZGU7XG5cdFx0XHR9KTtcblxuXHRcdFx0cmV0dXJuIGFjYztcblx0XHR9LCB7fSk7XG5cdH07XG5cblx0Ly8gTWFwc1xuXHRwdWJsaWMgcmVhZG9ubHkganVtcDogU3RyaW5nTWFwID0ge1xuXHRcdG51bGw6ICcwMDAnLFxuXHRcdEpHVDogJzAwMScsXG5cdFx0SkVROiAnMDEwJyxcblx0XHRKR0U6ICcwMTEnLFxuXHRcdEpMVDogJzEwMCcsXG5cdFx0Sk5FOiAnMTAxJyxcblx0XHRKTEU6ICcxMTAnLFxuXHRcdEpNUDogJzExMScsXG5cdH07XG5cblx0cHVibGljIHJlYWRvbmx5IGRlc3Q6IFN0cmluZ01hcCA9IHtcblx0XHRudWxsOiAnMDAwJyxcblx0XHRNOiAnMDAxJyxcblx0XHREOiAnMDEwJyxcblx0XHRNRDogJzAxMScsXG5cdFx0QTogJzEwMCcsXG5cdFx0QU06ICcxMDEnLFxuXHRcdEFEOiAnMTEwJyxcblx0XHRBTUQ6ICcxMTEnLFxuXHR9O1xuXG5cdHB1YmxpYyByZWFkb25seSBjb21wID0gdGhpcy5nZW5lcmF0ZUNvbXBNYXAoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29kZTtcbiJdfQ==